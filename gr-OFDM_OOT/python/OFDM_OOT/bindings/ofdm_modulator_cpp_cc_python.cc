/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
// BINDTOOL_GEN_AUTOMATIC(0)
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ofdm_modulator_cpp_cc.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(e4fe2a16db24ef7562113f644f407634)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/OFDM_OOT/ofdm_modulator_cpp_cc.h>
// pydoc.h is automatically generated in the build directory
#include <ofdm_modulator_cpp_cc_pydoc.h>

void bind_ofdm_modulator_cpp_cc(py::module& m)
{

    using ofdm_modulator_cpp_cc = gr::OFDM_OOT::ofdm_modulator_cpp_cc;


    py::class_<ofdm_modulator_cpp_cc,
               gr::block,
               gr::basic_block,
               std::shared_ptr<ofdm_modulator_cpp_cc>>(
        m, "ofdm_modulator_cpp_cc", D(ofdm_modulator_cpp_cc))

        .def(py::init(&ofdm_modulator_cpp_cc::make),
             py::arg("nfft") = 1024,
             py::arg("data_carriers_idx") = gr_vector_int(),
             py::arg("pilot_carriers_idx") = gr_vector_int(),
             py::arg("pilot_carriers_vals") = std::vector<gr_complex>(),
             py::arg("n_guard") = 128,
             D(ofdm_modulator_cpp_cc, make))


        ;
}
